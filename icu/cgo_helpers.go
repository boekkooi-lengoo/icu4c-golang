// WARNING: This file has automatically been generated on Thu, 18 Apr 2024 10:58:19 CEST.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package icu

/*
#cgo pkg-config: icu-i18n icu-io icu-uc
#cgo LDFLAGS: -licuuc -licudata
#include <unicode/utypes.h>
#include <unicode/utext.h>
#include <unicode/ubrk.h>
#include <unicode/uclean.h>
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import (
	"fmt"
	"runtime"
	"sync"
	"unsafe"
)

// Ref returns a reference to C object as it is.
func (x *breakIterator) Ref() *C.UBreakIterator {
	if x == nil {
		return nil
	}
	return (*C.UBreakIterator)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *breakIterator) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// newBreakIteratorRef converts the C object reference into a raw struct reference without wrapping.
func newBreakIteratorRef(ref unsafe.Pointer) *breakIterator {
	return (*breakIterator)(ref)
}

// newBreakIterator allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func newBreakIterator() *breakIterator {
	return (*breakIterator)(allocBreakIteratorMemory(1))
}

// allocBreakIteratorMemory allocates memory for type C.UBreakIterator in C.
// The caller is responsible for freeing the this memory via C.free.
func allocBreakIteratorMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfBreakIteratorValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfBreakIteratorValue = unsafe.Sizeof([1]C.UBreakIterator{})

// cgoAllocMap stores pointers to C allocated memory for future reference.
type cgoAllocMap struct {
	mux sync.RWMutex
	m   map[unsafe.Pointer]struct{}
}

var cgoAllocsUnknown = new(cgoAllocMap)

func (a *cgoAllocMap) Add(ptr unsafe.Pointer) {
	a.mux.Lock()
	if a.m == nil {
		a.m = make(map[unsafe.Pointer]struct{})
	}
	a.m[ptr] = struct{}{}
	a.mux.Unlock()
}

func (a *cgoAllocMap) IsEmpty() bool {
	a.mux.RLock()
	isEmpty := len(a.m) == 0
	a.mux.RUnlock()
	return isEmpty
}

func (a *cgoAllocMap) Borrow(b *cgoAllocMap) {
	if b == nil || b.IsEmpty() {
		return
	}
	b.mux.Lock()
	a.mux.Lock()
	for ptr := range b.m {
		if a.m == nil {
			a.m = make(map[unsafe.Pointer]struct{})
		}
		a.m[ptr] = struct{}{}
		delete(b.m, ptr)
	}
	a.mux.Unlock()
	b.mux.Unlock()
}

func (a *cgoAllocMap) Free() {
	a.mux.Lock()
	for ptr := range a.m {
		C.free(ptr)
		delete(a.m, ptr)
	}
	a.mux.Unlock()
}

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *breakIterator) PassRef() *C.UBreakIterator {
	if x == nil {
		x = (*breakIterator)(allocBreakIteratorMemory(1))
	}
	return (*C.UBreakIterator)(unsafe.Pointer(x))
}

// allocTextMemory allocates memory for type C.UText in C.
// The caller is responsible for freeing the this memory via C.free.
func allocTextMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfTextValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfTextValue = unsafe.Sizeof([1]C.UText{})

// copyPCharBytes copies the data from Go slice as *C.UChar.
func copyPCharBytes(slice *sliceHeader) (*C.UChar, *cgoAllocMap) {
	allocs := new(cgoAllocMap)
	defer runtime.SetFinalizer(allocs, func(a *cgoAllocMap) {
		go a.Free()
	})

	mem0 := unsafe.Pointer(C.CBytes(*(*[]byte)(unsafe.Pointer(&sliceHeader{
		Data: slice.Data,
		Len:  int(sizeOfCharValue) * slice.Len,
		Cap:  int(sizeOfCharValue) * slice.Len,
	}))))
	allocs.Add(mem0)

	return (*C.UChar)(mem0), allocs
}

type sliceHeader struct {
	Data unsafe.Pointer
	Len  int
	Cap  int
}

// allocCharMemory allocates memory for type C.UChar in C.
// The caller is responsible for freeing the this memory via C.free.
func allocCharMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfCharValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfCharValue = unsafe.Sizeof([1]C.UChar{})

// Ref returns the underlying reference to C object or nil if struct is nil.
func (x *text) Ref() *C.UText {
	if x == nil {
		return nil
	}
	return x.ref8c2c6043
}

// Free invokes alloc map's free mechanism that cleanups any allocated memory using C free.
// Does nothing if struct is nil or has no allocation map.
func (x *text) Free() {
	if x != nil && x.allocs8c2c6043 != nil {
		x.allocs8c2c6043.(*cgoAllocMap).Free()
		x.ref8c2c6043 = nil
	}
}

// newTextRef creates a new wrapper struct with underlying reference set to the original C object.
// Returns nil if the provided pointer to C object is nil too.
func newTextRef(ref unsafe.Pointer) *text {
	if ref == nil {
		return nil
	}
	obj := new(text)
	obj.ref8c2c6043 = (*C.UText)(unsafe.Pointer(ref))
	return obj
}

// PassRef returns the underlying C object, otherwise it will allocate one and set its values
// from this wrapping struct, counting allocations into an allocation map.
func (x *text) PassRef() (*C.UText, *cgoAllocMap) {
	if x == nil {
		return nil, nil
	} else if x.ref8c2c6043 != nil {
		return x.ref8c2c6043, nil
	}
	mem8c2c6043 := allocTextMemory(1)
	ref8c2c6043 := (*C.UText)(mem8c2c6043)
	allocs8c2c6043 := new(cgoAllocMap)
	allocs8c2c6043.Add(mem8c2c6043)

	var cmagic_allocs *cgoAllocMap
	ref8c2c6043.magic, cmagic_allocs = (C.uint32_t)(x.magic), cgoAllocsUnknown
	allocs8c2c6043.Borrow(cmagic_allocs)

	var cflags_allocs *cgoAllocMap
	ref8c2c6043.flags, cflags_allocs = (C.int32_t)(x.flags), cgoAllocsUnknown
	allocs8c2c6043.Borrow(cflags_allocs)

	var cproviderProperties_allocs *cgoAllocMap
	ref8c2c6043.providerProperties, cproviderProperties_allocs = (C.int32_t)(x.providerProperties), cgoAllocsUnknown
	allocs8c2c6043.Borrow(cproviderProperties_allocs)

	var csizeOfStruct_allocs *cgoAllocMap
	ref8c2c6043.sizeOfStruct, csizeOfStruct_allocs = (C.int32_t)(x.sizeOfStruct), cgoAllocsUnknown
	allocs8c2c6043.Borrow(csizeOfStruct_allocs)

	var cchunkNativeLimit_allocs *cgoAllocMap
	ref8c2c6043.chunkNativeLimit, cchunkNativeLimit_allocs = (C.int64_t)(x.chunkNativeLimit), cgoAllocsUnknown
	allocs8c2c6043.Borrow(cchunkNativeLimit_allocs)

	var cextraSize_allocs *cgoAllocMap
	ref8c2c6043.extraSize, cextraSize_allocs = (C.int32_t)(x.extraSize), cgoAllocsUnknown
	allocs8c2c6043.Borrow(cextraSize_allocs)

	var cnativeIndexingLimit_allocs *cgoAllocMap
	ref8c2c6043.nativeIndexingLimit, cnativeIndexingLimit_allocs = (C.int32_t)(x.nativeIndexingLimit), cgoAllocsUnknown
	allocs8c2c6043.Borrow(cnativeIndexingLimit_allocs)

	var cchunkNativeStart_allocs *cgoAllocMap
	ref8c2c6043.chunkNativeStart, cchunkNativeStart_allocs = (C.int64_t)(x.chunkNativeStart), cgoAllocsUnknown
	allocs8c2c6043.Borrow(cchunkNativeStart_allocs)

	var cchunkOffset_allocs *cgoAllocMap
	ref8c2c6043.chunkOffset, cchunkOffset_allocs = (C.int32_t)(x.chunkOffset), cgoAllocsUnknown
	allocs8c2c6043.Borrow(cchunkOffset_allocs)

	var cchunkLength_allocs *cgoAllocMap
	ref8c2c6043.chunkLength, cchunkLength_allocs = (C.int32_t)(x.chunkLength), cgoAllocsUnknown
	allocs8c2c6043.Borrow(cchunkLength_allocs)

	var cchunkContents_allocs *cgoAllocMap
	ref8c2c6043.chunkContents, cchunkContents_allocs = copyPCharBytes((*sliceHeader)(unsafe.Pointer(&x.chunkContents)))
	allocs8c2c6043.Borrow(cchunkContents_allocs)

	var cpExtra_allocs *cgoAllocMap
	ref8c2c6043.pExtra, cpExtra_allocs = *(*unsafe.Pointer)(unsafe.Pointer(&x.pExtra)), cgoAllocsUnknown
	allocs8c2c6043.Borrow(cpExtra_allocs)

	var ccontext_allocs *cgoAllocMap
	ref8c2c6043.context, ccontext_allocs = *(*unsafe.Pointer)(unsafe.Pointer(&x.context)), cgoAllocsUnknown
	allocs8c2c6043.Borrow(ccontext_allocs)

	var cp_allocs *cgoAllocMap
	ref8c2c6043.p, cp_allocs = *(*unsafe.Pointer)(unsafe.Pointer(&x.p)), cgoAllocsUnknown
	allocs8c2c6043.Borrow(cp_allocs)

	var cq_allocs *cgoAllocMap
	ref8c2c6043.q, cq_allocs = *(*unsafe.Pointer)(unsafe.Pointer(&x.q)), cgoAllocsUnknown
	allocs8c2c6043.Borrow(cq_allocs)

	var cr_allocs *cgoAllocMap
	ref8c2c6043.r, cr_allocs = *(*unsafe.Pointer)(unsafe.Pointer(&x.r)), cgoAllocsUnknown
	allocs8c2c6043.Borrow(cr_allocs)

	var cprivP_allocs *cgoAllocMap
	ref8c2c6043.privP, cprivP_allocs = *(*unsafe.Pointer)(unsafe.Pointer(&x.privP)), cgoAllocsUnknown
	allocs8c2c6043.Borrow(cprivP_allocs)

	var ca_allocs *cgoAllocMap
	ref8c2c6043.a, ca_allocs = (C.int64_t)(x.a), cgoAllocsUnknown
	allocs8c2c6043.Borrow(ca_allocs)

	var cb_allocs *cgoAllocMap
	ref8c2c6043.b, cb_allocs = (C.int32_t)(x.b), cgoAllocsUnknown
	allocs8c2c6043.Borrow(cb_allocs)

	var cc_allocs *cgoAllocMap
	ref8c2c6043.c, cc_allocs = (C.int32_t)(x.c), cgoAllocsUnknown
	allocs8c2c6043.Borrow(cc_allocs)

	var cprivA_allocs *cgoAllocMap
	ref8c2c6043.privA, cprivA_allocs = (C.int64_t)(x.privA), cgoAllocsUnknown
	allocs8c2c6043.Borrow(cprivA_allocs)

	var cprivB_allocs *cgoAllocMap
	ref8c2c6043.privB, cprivB_allocs = (C.int32_t)(x.privB), cgoAllocsUnknown
	allocs8c2c6043.Borrow(cprivB_allocs)

	var cprivC_allocs *cgoAllocMap
	ref8c2c6043.privC, cprivC_allocs = (C.int32_t)(x.privC), cgoAllocsUnknown
	allocs8c2c6043.Borrow(cprivC_allocs)

	x.ref8c2c6043 = ref8c2c6043
	x.allocs8c2c6043 = allocs8c2c6043
	return ref8c2c6043, allocs8c2c6043

}

// PassValue does the same as PassRef except that it will try to dereference the returned pointer.
func (x text) PassValue() (C.UText, *cgoAllocMap) {
	if x.ref8c2c6043 != nil {
		return *x.ref8c2c6043, nil
	}
	ref, allocs := x.PassRef()
	return *ref, allocs
}

// Deref uses the underlying reference to C object and fills the wrapping struct with values.
// Do not forget to call this method whether you get a struct for C object and want to read its values.
func (x *text) Deref() {
	if x.ref8c2c6043 == nil {
		return
	}
	x.magic = (uint32)(x.ref8c2c6043.magic)
	x.flags = (int32)(x.ref8c2c6043.flags)
	x.providerProperties = (int32)(x.ref8c2c6043.providerProperties)
	x.sizeOfStruct = (int32)(x.ref8c2c6043.sizeOfStruct)
	x.chunkNativeLimit = (int64)(x.ref8c2c6043.chunkNativeLimit)
	x.extraSize = (int32)(x.ref8c2c6043.extraSize)
	x.nativeIndexingLimit = (int32)(x.ref8c2c6043.nativeIndexingLimit)
	x.chunkNativeStart = (int64)(x.ref8c2c6043.chunkNativeStart)
	x.chunkOffset = (int32)(x.ref8c2c6043.chunkOffset)
	x.chunkLength = (int32)(x.ref8c2c6043.chunkLength)
	hxfc4425b := (*sliceHeader)(unsafe.Pointer(&x.chunkContents))
	hxfc4425b.Data = unsafe.Pointer(x.ref8c2c6043.chunkContents)
	hxfc4425b.Cap = 0x7fffffff
	// hxfc4425b.Len = ? x.chunkContents x.ref8c2c6043.chunkContents

	x.pExtra = (unsafe.Pointer)(unsafe.Pointer(x.ref8c2c6043.pExtra))
	x.context = (unsafe.Pointer)(unsafe.Pointer(x.ref8c2c6043.context))
	x.p = (unsafe.Pointer)(unsafe.Pointer(x.ref8c2c6043.p))
	x.q = (unsafe.Pointer)(unsafe.Pointer(x.ref8c2c6043.q))
	x.r = (unsafe.Pointer)(unsafe.Pointer(x.ref8c2c6043.r))
	x.privP = (unsafe.Pointer)(unsafe.Pointer(x.ref8c2c6043.privP))
	x.a = (int64)(x.ref8c2c6043.a)
	x.b = (int32)(x.ref8c2c6043.b)
	x.c = (int32)(x.ref8c2c6043.c)
	x.privA = (int64)(x.ref8c2c6043.privA)
	x.privB = (int32)(x.ref8c2c6043.privB)
	x.privC = (int32)(x.ref8c2c6043.privC)
}

// safeString ensures that the string is NULL-terminated, a NULL-terminated copy is created otherwise.
func safeString(str string) string {
	if len(str) > 0 && str[len(str)-1] != '\x00' {
		str = str + "\x00"
	} else if len(str) == 0 {
		str = "\x00"
	}
	return str
}

// unpackPCharString copies the data from Go string as *C.char.
func unpackPCharString(str string) (*C.char, *cgoAllocMap) {
	allocs := new(cgoAllocMap)
	defer runtime.SetFinalizer(allocs, func(a *cgoAllocMap) {
		go a.Free()
	})

	str = safeString(str)
	mem0 := unsafe.Pointer(C.CString(str))
	allocs.Add(mem0)
	return (*C.char)(mem0), allocs
}

type stringHeader struct {
	Data unsafe.Pointer
	Len  int
}

// packPCharString creates a Go string backed by *C.char and avoids copying.
func packPCharString(p *C.char) (raw string) {
	if p != nil && *p != 0 {
		h := (*stringHeader)(unsafe.Pointer(&raw))
		h.Data = unsafe.Pointer(p)
		for *p != 0 {
			p = (*C.char)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 1)) // p++
		}
		h.Len = int(uintptr(unsafe.Pointer(p)) - uintptr(h.Data))
	}
	return
}

// RawString reperesents a string backed by data on the C side.
type RawString string

// Copy returns a Go-managed copy of raw string.
func (raw RawString) Copy() string {
	if len(raw) == 0 {
		return ""
	}
	h := (*stringHeader)(unsafe.Pointer(&raw))
	return C.GoStringN((*C.char)(h.Data), C.int(h.Len))
}
